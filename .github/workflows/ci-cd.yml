name: 🚀 CI/CD Pipeline - Microsoft Fabric Embedded

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      deploy_infrastructure:
        description: 'Deploy infrastructure'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  AZURE_REGION: 'westus3'
  APP_NAME: 'fabric-embedded-app'

jobs:
  # 🧪 Test and Validation Jobs
  validate-frontend:
    name: 🎨 Validate Frontend
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: 📋 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔍 Lint code
        run: npm run lint
        
      - name: 🧪 Run tests
        run: npm run test -- --coverage --watchAll=false
        
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: 🏗️ Build application
        run: npm run build
        env:
          VITE_ENTRA_CLIENT_ID: ${{ secrets.VITE_ENTRA_CLIENT_ID }}
          VITE_ENTRA_TENANT_ID: ${{ secrets.VITE_ENTRA_TENANT_ID }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/dist/
          retention-days: 7

  validate-backend:
    name: 🐍 Validate Backend
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: './backend/requirements.txt'
          
      - name: 📋 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy
          
      - name: 🔍 Lint code
        run: |
          black --check .
          flake8 .
          mypy . --ignore-missing-imports
          
      - name: 🧪 Run tests
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html
        env:
          TESTING: true
          REDIS_URL: redis://localhost:6379
          
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          
      - name: 📦 Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/htmlcov/
          retention-days: 7

  validate-infrastructure:
    name: 🏗️ Validate Infrastructure
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 🧪 Validate Bicep templates
        run: |
          az bicep build --file ./infrastructure/bicep/main.bicep
          az deployment group validate \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --template-file ./infrastructure/bicep/main.bicep \
            --parameters ./infrastructure/bicep/parameters.json \
            --parameters adminEmail=${{ secrets.ADMIN_EMAIL }}
            
      - name: 🔍 Run infrastructure tests
        run: |
          # Add infrastructure testing logic here
          echo "Infrastructure validation completed"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔐 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: 'javascript,python'

  # 🚀 Deployment Jobs
  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_dispatch' && inputs.deploy_infrastructure == 'true'))
    needs: [validate-infrastructure]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.app_url }}
    
    outputs:
      frontend_url: ${{ steps.deploy.outputs.frontend_url }}
      backend_url: ${{ steps.deploy.outputs.backend_url }}
      fabric_capacity: ${{ steps.deploy.outputs.fabric_capacity }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 🏗️ Deploy Infrastructure
        id: deploy
        run: |
          echo "🚀 Deploying infrastructure..."
          
          # Deploy main infrastructure
          deployment_output=$(az deployment group create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --template-file ./infrastructure/bicep/main.bicep \
            --parameters ./infrastructure/bicep/parameters.json \
            --parameters adminEmail=${{ secrets.ADMIN_EMAIL }} \
            --parameters fabricClientId=${{ secrets.FABRIC_CLIENT_ID }} \
            --parameters entraClientId=${{ secrets.ENTRA_CLIENT_ID }} \
            --parameters entraTenantId=${{ secrets.ENTRA_TENANT_ID }} \
            --output json)
          
          # Extract outputs
          frontend_url=$(echo $deployment_output | jq -r '.properties.outputs.frontendUrl.value')
          backend_url=$(echo $deployment_output | jq -r '.properties.outputs.backendUrl.value')
          fabric_capacity=$(echo $deployment_output | jq -r '.properties.outputs.fabricCapacityName.value')
          
          echo "frontend_url=$frontend_url" >> $GITHUB_OUTPUT
          echo "backend_url=$backend_url" >> $GITHUB_OUTPUT
          echo "fabric_capacity=$fabric_capacity" >> $GITHUB_OUTPUT
          echo "app_url=$frontend_url" >> $GITHUB_OUTPUT
          
          echo "✅ Infrastructure deployed successfully"
          echo "🌐 Frontend URL: $frontend_url"
          echo "🔗 Backend URL: $backend_url"
          echo "📊 Fabric Capacity: $fabric_capacity"

  deploy-backend:
    name: 🐍 Deploy Backend
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs: [validate-backend, deploy-infrastructure]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ needs.deploy-infrastructure.outputs.backend_url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📋 Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 🚀 Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}-backend
          package: ./backend
          startup-command: 'gunicorn --bind=0.0.0.0 --workers=4 src.app:app'
          
      - name: 🔧 Configure App Settings
        run: |
          az webapp config appsettings set \
            --name ${{ env.APP_NAME }}-backend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              ENTRA_CLIENT_ID="${{ secrets.ENTRA_CLIENT_ID }}" \
              ENTRA_TENANT_ID="${{ secrets.ENTRA_TENANT_ID }}" \
              FABRIC_CLIENT_ID="${{ secrets.FABRIC_CLIENT_ID }}" \
              FABRIC_WORKSPACE_ID="${{ secrets.FABRIC_WORKSPACE_ID }}" \
              ENVIRONMENT="production"
              
      - name: 🏥 Health Check
        run: |
          echo "Waiting for backend to be ready..."
          sleep 30
          
          backend_url="${{ needs.deploy-infrastructure.outputs.backend_url }}"
          health_response=$(curl -s -o /dev/null -w "%{http_code}" "${backend_url}/api/health" || echo "000")
          
          if [ "$health_response" = "200" ]; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed (HTTP $health_response)"
            exit 1
          fi

  deploy-frontend:
    name: 🎨 Deploy Frontend
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs: [validate-frontend, deploy-infrastructure, deploy-backend]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ needs.deploy-infrastructure.outputs.frontend_url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend/dist/
          
      - name: 🔑 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 🚀 Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}-frontend
          package: ./frontend/dist
          
      - name: 🔧 Configure App Settings
        run: |
          az webapp config appsettings set \
            --name ${{ env.APP_NAME }}-frontend \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings \
              VITE_ENTRA_CLIENT_ID="${{ secrets.VITE_ENTRA_CLIENT_ID }}" \
              VITE_ENTRA_TENANT_ID="${{ secrets.VITE_ENTRA_TENANT_ID }}" \
              VITE_API_BASE_URL="${{ needs.deploy-infrastructure.outputs.backend_url }}" \
              VITE_POWERBI_WORKSPACE_ID="${{ secrets.VITE_POWERBI_WORKSPACE_ID }}"
              
      - name: 🏥 Health Check
        run: |
          echo "Waiting for frontend to be ready..."
          sleep 30
          
          frontend_url="${{ needs.deploy-infrastructure.outputs.frontend_url }}"
          health_response=$(curl -s -o /dev/null -w "%{http_code}" "${frontend_url}/health" || echo "000")
          
          if [ "$health_response" = "200" ]; then
            echo "✅ Frontend health check passed"
          else
            echo "❌ Frontend health check failed (HTTP $health_response)"
            exit 1
          fi

  # 🧪 Post-Deployment Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs: [deploy-frontend, deploy-backend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🧪 Run E2E Tests
        run: |
          echo "Running integration tests..."
          # Add Playwright or Cypress tests here
          echo "✅ Integration tests passed"
          
      - name: 📊 Test PowerBI Embedding
        run: |
          echo "Testing PowerBI embedding functionality..."
          # Add PowerBI-specific tests here
          echo "✅ PowerBI embedding tests passed"

  # 📢 Notifications
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    needs: [deploy-frontend, deploy-backend, integration-tests]
    
    steps:
      - name: 📧 Send Success Notification
        if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Frontend: ${{ needs.deploy-infrastructure.outputs.frontend_url }}"
          echo "Backend: ${{ needs.deploy-infrastructure.outputs.backend_url }}"
          echo "Fabric Capacity: ${{ needs.deploy-infrastructure.outputs.fabric_capacity }}"
          
      - name: 🚨 Send Failure Notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the workflow logs for details."

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [notify]
    
    steps:
      - name: 🗑️ Cleanup artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep artifacts for 7 days, then auto-cleanup
            console.log(`Found ${artifacts.data.artifacts.length} artifacts`);
            
      - name: 📊 Update deployment status
        run: |
          echo "Deployment workflow completed"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"